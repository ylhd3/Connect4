from core import Strategy

import random

class Bot1(Strategy):
    def __init__(self):
        self.author = "Yen-Linh"

#class to play
    def play(self, board):

    #defense and winning (nothing if there is no way in winning)

        badrow = 0
        badcol = 0

#vertical checking x 3
        for c in range(0,7):
            for r in range(0,3):

                #opponent vertical
                if board[r,c] == 0 and board[r+1,c] == 3-self.turn and board[r+2,c] == 3-self.turn and board[r+3,c] == 3-self.turn:
                    return c
                #own vertical
                if board[r,c] == 0 and board[r+1,c] == self.turn and board[r+2,c] == self.turn and board[r+3,c] == self.turn:
                    return c

#horizontal checking x 3
        for r in range(0,6):
            for c in range(0,4):

                #if the board is -+++
                #own
                if board[r,c] == 0 and board[r,c+1] == self.turn and board[r,c+2] == self.turn and board[r,c+3] == self.turn:
                    #to stop the bot from letting the player defend against them
                    if badrow != r and badcol != c:
                        if r == 5 or board[r+1,c] != 0:
                            return c
                        else:
                            badrow = r
                            badcol = c
                #opponent
                if board[r,c] == 0 and board[r,c+1] == 3-self.turn and board[r,c+2] == 3-self.turn and board[r,c+3] == 3-self.turn:
                    if badrow != r and badcol != c:
                        if r == 5 or board[r+1,c] != 0:
                            return c
                        else:
                            badrow = r
                            badcol = c
                #if the board is +-++
                #own
                if board[r,c] == self.turn and board[r,c+1] == 0 and board[r,c+2] == self.turn and board[r,c+3] == self.turn:
                    if badrow != r and badcol != c:
                        if r == 5 or board[r+1,c+1] != 0:
                            return c+1
                        else:
                            badrow = r
                            badcol = c
                #opponent
                if board[r,c] == 3-self.turn and board[r,c+1] == 0 and board[r,c+2] == 3-self.turn and board[r,c+3] == 3-self.turn:
                    if badrow != r and badcol != c:
                        if r == 5 or board[r+1,c+1] != 0:
                            return c+1
                        else:
                            badrow = r
                            badcol = c

                #if the board is ++-+
                #own
                if board[r,c] == self.turn and board[r,c+1] == self.turn and board[r,c+2] == 0 and board[r,c+3] == self.turn:
                    if badrow != r and badcol != c:
                        if r == 5 or board[r+1,c+2] != 0:
                            return c+2
                        else:
                            badrow = r
                            badcol = c
                #opponent
                if board[r,c] == 3-self.turn and board[r,c+1] == 3-self.turn and board[r,c+2] == 0 and board[r,c+3] == 3-self.turn:
                    if badrow != r and badcol != c:
                        if r == 5 or board[r+1,c+2] != 0:
                            return c+2
                        else:
                            badrow = r
                            badcol = c

                #if the board is +++-
                #own
                if board[r,c] == self.turn and board[r,c+1] == self.turn and board[r,c+2] == self.turn and board[r,c+3] == 0:
                    if badrow != r and badcol != c:
                        if r == 5 or board[r+1,c+3] != 0:
                            return c+3
                        else:
                            badrow = r
                            badcol = c
                #opponent
                if board[r,c] == 3-self.turn and board[r,c+1] == 3-self.turn and board[r,c+2] == 3-self.turn and board[r,c+3] == 0:
                    if badrow != r and badcol != c:
                        if r == 5 or board[r+1,c+3] != 0:
                            return c+3
                        else:
                            badrow = r
                            badcol = c

#from left to right diagonal x3
        for c in range(0,4):
            for r in range(0,3):
                #
                #own
                if board[r,c] == 0 and board[r+1,c+1] == self.turn and board[r+2,c+2] == self.turn and board[r+3,c+3] == self.turn:
                    #doesn't allow the opponent to defend against bot
                    if badrow != r and badcol != c:
                        if board[r+1,c] != 0:
                            return c
                        else:
                            badrow = r
                            badcol = c
                #opponent
                if board[r,c] == 0 and board[r+1,c+1] == 3-self.turn and board[r+2,c+2] == 3-self.turn and board[r+3,c+3] == 3-self.turn:
                    #doesnt give the opponebt the win
                    if badrow != r and badcol != c:
                        if board[r+1,c] != 0:
                            return c
                        else:
                            badrow = r
                            badcol = c

                #
                #own
                if board[r,c] == self.turn and board[r+1,c+1] == 0 and board[r+2,c+2] == self.turn and board[r+3,c+3] == self.turn:
                    #doesn't allow the opponent to defend against bot
                    if badrow != r+1 and badcol != c+1:
                        if board[r+2,c+1] != 0:
                            return c+1
                        else:
                            badrow = r+1
                            badcol = c+1
                #opponent
                if board[r,c] == 3-self.turn and board[r+1,c+1] == 0 and board[r+2,c+2] == 3-self.turn and board[r+3,c+3] == 3-self.turn:
                    #doesnt give the opponebt the win
                    if badrow != r+1 and badcol != c+1:
                        if board[r+2,c+1] != 0:
                            return c+1
                        else:
                            badrow = r+1
                            badcol = c+1

                #
                #own
                if board[r,c] == self.turn and board[r+1,c+1] == self.turn and board[r+2,c+2] == 0 and board[r+3,c+3] == self.turn:
                    #doesn't allow the opponent to defend against bot
                    if badrow != r+2 and badcol != c+2:
                        if board[r+3,c+2] != 0:
                            return c+2
                        else:
                            badrow = r+2
                            badcol = c+2
                #opponent
                if board[r,c] == 3-self.turn and board[r+1,c+1] == 3-self.turn and board[r+2,c+2] == 0 and board[r+3,c+3] == 3-self.turn:
                    #doesnt give the opponebt the win
                    if badrow != r+2 and badcol != c+2:
                        if board[r+3,c+2] != 0:
                            return c+2
                        else:
                            badrow = r+2
                            badcol = c+2

                #
                #own
                if board[r,c] == self.turn and board[r+1,c+1] == self.turn and board[r+2,c+2] == self.turn and board[r+3,c+3] == 0:
                    #doesn't allow the opponent to defend against bot
                    if badrow != r+3 and badcol != c+3:
                        if r == 2 or board[r+4,c+3] != 0:
                            return c+3
                        else:
                            badrow = r+3
                            badcol = c+3
                #opponent
                if board[r,c] == 3-self.turn and board[r+1,c+1] == self.turn and board[r+2,c+2] == 3-self.turn and board[r+3,c+3] == 0:
                    #doesnt give the opponebt the win
                    if badrow != r+3 and badcol != c+3:
                        if r == 2 or board[r+4,c+3] != 0:
                            return c+3
                        else:
                            badrow = r+3
                            badcol = c+3

#from right to left diagonal x3
        for c in range(3,7):
            for r in range(0,3):
                #
                #own
                if board[r,c] == 0 and board[r+1,c-1] == self.turn and board[r+2,c-2] == self.turn and board[r+3,c-3] == self.turn:
                    #doesn't allow the opponent to defend against bot
                    if badrow != r and badcol != c:
                        if r == 2 or board[r+1,c] != 0:
                            return c
                        else:
                            badrow = r
                            badcol = c
                #opponent
                if board[r,c] == 0 and board[r+1,c-1] == 3-self.turn and board[r+2,c-2] == 3-self.turn and board[r+3,c-3] == 3-self.turn:
                    #doesnt give the opponebt the win
                    if badrow != r and badcol != c:
                        if r == 2 or board[r+1,c] != 0:
                            return c
                        else:
                            badrow = r
                            badcol = c

                #
                #own
                if board[r,c] == self.turn and board[r+1,c-1] == 0 and board[r+2,c-2] == self.turn and board[r+3,c-3] == self.turn:
                    #doesn't allow the opponent to defend against bot
                    if badrow != r+1 and badcol != c-1:
                        if board[r+2,c-1] != 0:
                            return c-1
                        else:
                            badrow = r+1
                            badcol = c-1
                #opponent
                if board[r,c] == 3-self.turn and board[r+1,c-1] == 0 and board[r+2,c-2] == 3-self.turn and board[r+3,c-3] == 3-self.turn:
                    #doesnt give the opponebt the win
                    if badrow != r+1 and badcol != c-1:
                        if board[r+2,c-1] != 0:
                            return c-1
                        else:
                            badrow = r+1
                            badcol = c-1

                #
                #own
                if board[r,c] == self.turn and board[r+1,c-1] == self.turn and board[r+2,c-2] == 0 and board[r+3,c-3] == self.turn:
                    #doesn't allow the opponent to defend against bot
                    if badrow != r+2 and badcol != c-2:
                        if board[r+3,c-2] != 0:
                            return c-2
                        else:
                            badrow = r+2
                            badcol = c-2
                #opponent
                if board[r,c] == 3-self.turn and board[r+1,c-1] == 3-self.turn and board[r+2,c-2] == 0 and board[r+3,c-3] == 3-self.turn:
                    #doesnt give the opponebt the win
                    if badrow != r+2 and badcol != c-2:
                        if board[r+3,c-2] != 0:
                            return c-2
                        else:
                            badrow = r+2
                            badcol = c-2

                #
                #own
                if board[r,c] == self.turn and board[r+1,c-1] == self.turn and board[r+2,c-2] == self.turn and board[r+3,c-3] == 0:
                    #doesn't allow the opponent to defend against bot
                    if badrow != r+3 and badcol != c-3:
                        if r == 2 or board[r+4,c-3] != 0:
                            return c-3
                        else:
                            badrow = r+3
                            badcol = c-3
                #opponent
                if board[r,c] == 3-self.turn and board[r+1,c-1] == 3-self.turn and board[r+2,c-2] == 3-self.turn and board[r+3,c-3] == 0:
                    #doesnt give the opponebt the win
                    if badrow != r+3 and badcol != c-3:
                        if r == 2 or board[r+4,c-3] != 0:
                            return c-3
                        else:
                            badrow = r+3
                            badcol = c-3

#from left to right diagonal x3 for always winning
        for c in range(0,3):
            for r in range(0,2):
                #
                #own
                if board[r,c] == 0 and board[r+1,c+1] == self.turn and board[r+2,c+2] == self.turn and board[r+3,c+3] == 0 and board[r+4,c+4] == 0:
                    #doesn't allow the opponent to defend against bot
                    if badrow != r+3 and badcol != c+3:
                        if board[r+2,c+3] != 0:
                            return c+3
                        else:
                            badrow = r+3
                            badcol = c+3
                #opponent
                if board[r,c] == 0 and board[r+1,c+1] == 3-self.turn and board[r+2,c+2] == 3-self.turn and board[r+3,c+3] == 0 and board[r+4,c+4] == 0:
                    #doesnt give the opponebt the win
                    if badrow != r+3 and badcol != c+3:
                        if board[r+2,c] != 0:
                            return c+3
                        else:
                            badrow = r+3
                            badcol = c+3

                #
                #own
                if board[r,c] == 0 and board[r+1,c+1] == self.turn and board[r+2,c+2] == 0 and board[r+3,c+3] == self.turn and board[r+4,c+4] == 0:
                    #doesn't allow the opponent to defend against bot
                    if badrow != r+2 and badcol != c+2:
                        if board[r+1,c+2] != 0:
                            return c+2
                        else:
                            badrow = r+2
                            badcol = c+2
                #opponent
                if board[r,c] == 0 and board[r+1,c+1] == 3-self.turn and board[r+2,c+2] == 0 and board[r+3,c+3] == 3-self.turn and board[r+4,c+4] == 0:
                    #doesnt give the opponebt the win
                    if badrow != r+2 and badcol != c+2:
                        if board[r+1,c+2] != 0:
                            return c+3
                        else:
                            badrow = r+2
                            badcol = c+2

                #
                #own
                if board[r,c] == 0 and board[r+1,c+1] == 0 and board[r+2,c+2] == self.turn and board[r+3,c+3] == self.turn and board[r+4,c+4] == 0:
                    #doesn't allow the opponent to defend against bot
                    if badrow != r+1 and badcol != c+1:
                        if board[r,c+1] != 0:
                            return c+1
                        else:
                            badrow = r+1
                            badcol = c+1
                #opponent
                if board[r,c] == 0 and board[r+1,c+1] == 0 and board[r+2,c+2] == 3-self.turn and board[r+3,c+3] == 3-self.turn and board[r+4,c+4] == 0:
                    #doesnt give the opponebt the win
                    if badrow != r+1 and badcol != c+1:
                        if board[r,c+1] != 0:
                            return c+1
                        else:
                            badrow = r+1
                            badcol = c+1

#from right to left diagonal x3 for always winning
        for c in range(4,7):
            for r in range(0,2):
                #
                #own
                if board[r,c] == 0 and board[r+1,c-1] == self.turn and board[r+2,c-2] == self.turn and board[r+3,c-3] == 0 and board[r+4,c-4] == 0:
                    #doesn't allow the opponent to defend against bot
                    if badrow != r+3 and badcol != c-3:
                        if board[r+2,c-3] != 0:
                            return c-3
                        else:
                            badrow = r+3
                            badcol = c-3
                #opponent
                if board[r,c] == 0 and board[r+1,c-1] == 3-self.turn and board[r+2,c-2] == 3-self.turn and board[r+3,c-3] == 0 and board[r+4,c-4] == 0:
                    #doesnt give the opponebt the win
                    if badrow != r+3 and badcol != c-3:
                        if board[r+2,c-3] != 0:
                            return c-3
                        else:
                            badrow = r+3
                            badcol = c-3

                #
                #own
                if board[r,c] == 0 and board[r+1,c-1] == 0 and board[r+2,c-2] == 0 and board[r+3,c-3] == self.turn and board[r+4,c-4] == 0:
                    #doesn't allow the opponent to defend against bot
                    if badrow != r+2 and badcol != c-2:
                        if board[r+1,c-2] != 0:
                            return c-2
                        else:
                            badrow = r+2
                            badcol = c-2
                #opponent
                if board[r,c] == 0 and board[r+1,c-1] == 0 and board[r+2,c-2] == 0 and board[r+3,c-3] == 3-self.turn and board[r+4,c-4] == 0:
                    #doesnt give the opponebt the win
                    if badrow != r+2 and badcol != c+2:
                        if board[r+1,c-2] != 0:
                            return c-2
                        else:
                            badrow = r+2
                            badcol = c-2

                #
                #own
                if board[r,c] == 0 and board[r+1,c-1] == 0 and board[r+2,c-2] == self.turn and board[r+3,c-3] == self.turn and board[r+4,c-4] == 0:
                    #doesn't allow the opponent to defend against bot
                    if badrow != r+1 and badcol != c-1:
                        if board[r,c-1] != 0:
                            return c-1
                        else:
                            badrow = r+1
                            badcol = c-1
                #opponent
                if board[r,c] == 0 and board[r+1,c-1] == 0 and board[r+2,c-2] == 3-self.turn and board[r+3,c-3] == 3-self.turn and board[r+4,c-4] == 0:
                    #doesnt give the opponebt the win
                    if badrow != r+1 and badcol != c-1:
                        if board[r,c-1] != 0:
                            return c-1
                        else:
                            badrow = r+1
                            badcol = c-1

#diagonal+horizontalv1
        for r in range(1,3):
            for c in range(0,5):

                #
                #own
                if board[r,c] == self.turn and board[r,c+1] == self.turn and board[r,c+2] == 0 and board[r+2,c] == self.turn and board[r+1,c+1] == self.turn and board[r-1,c+3] == 0:
                    if badrow != r and badcol != c+2:
                        if board[r+1,c+2] != 0:
                            return c+2
                        else:
                            badrow = r
                            badcol = c+2
                #opponent
                if board[r,c] == 3-self.turn and board[r,c+1] == 3-self.turn and board[r,c+2] == 0 and board[r+2,c] == 3-self.turn and board[r+1,c+1] == 3-self.turn and board[r-1,c+3] == 0:
                    if badrow != r and badcol != c+2:
                        if board[r+1,c+2] != 0:
                            return c+2
                        else:
                            badrow = r
                            badcol = c+2
                #
                #own
                if board[r,c] == self.turn and board[r,c+1] == 0 and board[r,c+2] == self.turn and board[r+2,c] == self.turn and board[r+1,c+1] == self.turn and board[r-1,c+3] == 0:
                    if badrow != r and badcol != c+1:
                        if board[r+1,c+1] != 0:
                            return c+1
                        else:
                            badrow = r
                            badcol = c+1
                #opponent
                if board[r,c] == 3-self.turn and board[r,c+1] == 0 and board[r,c+2] == 3-self.turn and board[r+2,c] == 3-self.turn and board[r+1,c+1] == 3-self.turn and board[r-1,c+3] == 0:
                    if badrow != r and badcol != c+1:
                        if board[r+1,c+1] != 0:
                            return c+1
                        else:
                            badrow = r
                            badcol = c+1

                #
                #own
                if board[r,c] == 0 and board[r,c+1] == self.turn and board[r,c+2] == self.turn and board[r+2,c] == self.turn and board[r+1,c+1] == self.turn and board[r-1,c+3] == 0:
                    if badrow != r and badcol != c:
                        if board[r+1,c] != 0:
                            return c
                        else:
                            badrow = r
                            badcol = c
                #opponent
                if board[r,c] == 0 and board[r,c+1] == 3-self.turn and board[r,c+2] == 3-self.turn and board[r+2,c] == 3-self.turn and board[r+1,c+1] == 3-self.turn and board[r-1,c+3] == 0:
                    if badrow != r and badcol != c:
                        if board[r+1,c] != 0:
                            return c
                        else:
                            badrow = r
                            badcol = c

#diagonal+horizontalv2
        for r in range(1,3):
            for c in range(1,5):

                #
                #own
                if board[r-1,c-1] == 0 and board[r,c] == self.turn and board[r,c+1] == self.turn and board[r,c+2] == 0 and board[r+2,c] == self.turn and board[r+1,c+1] == self.turn:
                    if badrow != r and badcol != c+2:
                        if board[r+1,c+2] != 0:
                            return c+2
                        else:
                            badrow = r
                            badcol = c+2
                #opponent
                if board[r-1,c-1] == 0 and board[r,c] == 3-self.turn and board[r,c+1] == 3-self.turn and board[r,c+2] == 0 and board[r+2,c] == 3-self.turn and board[r+1,c+1] == 3-self.turn:
                    if badrow != r and badcol != c+2:
                        if board[r+1,c+2] != 0:
                            return c+2
                        else:
                            badrow = r
                            badcol = c+2
                #
                #own
                if board[r-1,c-1] == 0 and board[r,c] == self.turn and board[r,c+1] == 0 and board[r,c+2] == self.turn and board[r+2,c] == self.turn and board[r+1,c+1] == self.turn:
                    if badrow != r and badcol != c+1:
                        if board[r+1,c+1] != 0:
                            return c+1
                        else:
                            badrow = r
                            badcol = c+1
                #opponent
                if board[r-1,c-1] == 0 and board[r,c] == 3-self.turn and board[r,c+1] == 0 and board[r,c+2] == 3-self.turn and board[r+2,c] == 3-self.turn and board[r+1,c+1] == 3-self.turn:
                    if badrow != r and badcol != c+1:
                        if board[r+1,c+1] != 0:
                            return c+1
                        else:
                            badrow = r
                            badcol = c+1

                #
                #own
                if board[r-1,c-1] == 0 and board[r,c] == 0 and board[r,c+1] == self.turn and board[r,c+2] == self.turn and board[r+2,c] == self.turn and board[r+1,c+1] == self.turn:
                    if badrow != r and badcol != c:
                        if board[r+1,c] != 0:
                            return c
                        else:
                            badrow = r
                            badcol = c
                #opponent
                if board[r-1,c-1] == 0 and board[r,c] == 0 and board[r,c+1] == 3-self.turn and board[r,c+2] == 3-self.turn and board[r+2,c] == 3-self.turn and board[r+1,c+1] == 3-self.turn:
                    if badrow != r and badcol != c:
                        if board[r+1,c] != 0:
                            return c
                        else:
                            badrow = r
                            badcol = c

#diagonal+horizontalv3
        for r in range(0,4):
            for c in range(2,6):

                #
                #own
                if board[r,c] == 0 and board[r+1,c] == self.turn and board[r+1,c+1] == self.turn and board[r+1,c-1] == self.turn and board[r+2,c-2] == self.turn and board[r-1,c+1] == 0:
                    if badrow != r and badcol != c:
                        if board[r+1,c] != 0:
                            return c+2
                        else:
                            badrow = r
                            badcol = c
                #opponent
                if board[r,c] == 0 and board[r+1,c] == 3-self.turn and board[r+1,c+1] == 3-self.turn and board[r+1,c-1] == 3-self.turn and board[r+2,c-2] == 3-self.turn and board[r-1,c+1] == 0:
                    if badrow != r and badcol != c:
                        if board[r+1,c] != 0:
                            return c+2
                        else:
                            badrow = r
                            badcol = c
                #
                #own
                if board[r,c] == self.turn and board[r+1,c] == self.turn and board[r+1,c+1] == self.turn and board[r+1,c-1] == 0 and board[r+2,c-2] == self.turn and board[r-1,c+1] == 0:
                    if badrow != r and badcol != c-1:
                        if board[r+1,c-1] != 0:
                            return c+1
                        else:
                            badrow = r
                            badcol = c-1
                #opponent
                if board[r,c] == 3-self.turn and board[r+1,c] == 3-self.turn and board[r+1,c+1] == 3-self.turn and board[r+1,c-1] == 0 and board[r+2,c-2] == 3-self.turn and board[r-1,c+1] == 0:
                    if badrow != r and badcol != c-1:
                        if board[r+1,c-1] != 0:
                            return c+1
                        else:
                            badrow = r
                            badcol = c-1

                #
                #own
                if board[r,c] == self.turn and board[r+1,c] == self.turn and board[r+1,c+1] == self.turn and board[r+1,c-1] == self.turn and board[r+2,c-2] == 0 and board[r-1,c+1] == 0:
                    if badrow != r and badcol != c-2:
                        if r == 3 or board[r+1,c-2] != 0:
                            return c-2
                        else:
                            badrow = r
                            badcol = c-2
                #opponent
                if board[r,c] == 3-self.turn and board[r+1,c] == 3-self.turn and board[r+1,c+1] == 3-self.turn and board[r+1,c-1] == 3-self.turn and board[r+2,c-2] == 0 and board[r-1,c+1] == 0:
                    if badrow != r and badcol != c-2:
                        if r == 3 or board[r+1,c-2] != 0:
                            return c
                        else:
                            badrow = r
                            badcol = c-2


#from right to left diagonal x2
        for c in range(2,7):
            for r in range(0,4):
                #
                #own
                if board[r,c] == 0 and board[r+1,c-1] == self.turn and board[r+2,c-2] == self.turn:
                    #doesn't allow the opponent to defend against bot
                    if badrow != r and badcol != c:
                        if r == 3 or board[r+1,c] != 0:
                            return c
                        else:
                            badrow = r
                            badcol = c
                #opponent
                if board[r,c] == 0 and board[r+1,c-1] == 3-self.turn and board[r+2,c-2] == 3-self.turn:
                    #doesnt give the opponebt the win
                    if badrow != r and badcol != c:
                        if r == 3 or board[r+1,c] != 0:
                            return c
                        else:
                            badrow = r
                            badcol = c

                #
                #own
                if board[r,c] == self.turn and board[r+1,c-1] == self.turn and board[r+2,c-2] == 0:
                    #doesn't allow the opponent to defend against bot
                    if badrow != r+2 and badcol != c-2:
                        if  r == 3 or board[r+3,c-2] != 0:
                            return c-2
                        else:
                            badrow = r+2
                            badcol = c-2
                #opponent
                if board[r,c] == 3-self.turn and board[r+1,c-1] == 3-self.turn and board[r+2,c-2] == 0:
                    #doesnt give the opponebt the win
                    if badrow != r+2 and badcol != c-2:
                        if  r == 3 or board[r+3,c-2] != 0:
                            return c-2
                        else:
                            badrow = r+2
                            badcol = c-2

                #
                #own
                if board[r,c] == self.turn and board[r+1,c-1] == 0 and board[r+2,c-2] == self.turn:
                    #doesn't allow the opponent to defend against bot
                    if badrow != r+1 and badcol != c-1:
                        if board[r+2,c-1] != 0:
                            return c-1
                        else:
                            badrow = r+1
                            badcol = c-1
                #opponent
                if board[r,c-2] == 3-self.turn and board[r+1,c-1] == 0 and board[r+2,c-2] == 3-self.turn:
                    #doesnt give the opponebt the win
                    if badrow != r+1 and badcol != c-1:
                        if board[r+2,c-1] != 0:
                            return c-1
                        else:
                            badrow = r+1
                            badcol = c-1

#from left to right diagonal x2
        for c in range(0,5):
            for r in range(0,4):
                #
                #own
                if board[r,c] == 0 and board[r+1,c+1] == self.turn and board[r+2,c+2] == self.turn:
                    #doesn't allow the opponent to defend against bot
                    if badrow != r and badcol != c:
                        if board[r+1,c] != 0:
                            return c
                        else:
                            badrow = r
                            badcol = c
                #opponent
                if board[r,c] == 0 and board[r+1,c+1] == 3-self.turn and board[r+2,c+2] == 3-self.turn:
                    #doesnt give the opponebt the win
                    if badrow != r and badcol != c:
                        if board[r+1,c] != 0:
                            return c
                        else:
                            badrow = r
                            badcol = c

                #
                #own
                if board[r,c] == self.turn and board[r+1,c+1] == self.turn and board[r+2,c+2] == 0:
                    #doesn't allow the opponent to defend against bot
                    if badrow != r+2 and badcol != c+2:
                        if r == 3 or board[r+3,c+2] != 0:
                            return c+2
                        else:
                            badrow = r+2
                            badcol = c+2
                #opponent
                if board[r,c] == 3-self.turn and board[r+1,c+1] == 3-self.turn and board[r+2,c+2] == 0:
                    #doesnt give the opponebt the win
                    if badrow != r+2 and badcol != c+2:
                        if r == 3 or board[r+3,c+2] != 0:
                            return c+2
                        else:
                            badrow = r+2
                            badcol = c+2

                #
                #own
                if board[r,c] == self.turn and board[r+1,c+1] == 0 and board[r+2,c+2] == self.turn:
                    #doesn't allow the opponent to defend against bot
                    if badrow != r+1 and badcol != c+1:
                        if board[r+2,c+2] != 0:
                            return c+1
                        else:
                            badrow = r+1
                            badcol = c+1
                #opponent
                if board[r,c] == 3-self.turn and board[r+1,c+1] == 0 and board[r+2,c+2] == 3-self.turn:
                    #doesnt give the opponebt the win
                    if badrow != r+1 and badcol != c+1:
                        if board[r+2,c+2] != 0:
                            return c+1
                        else:
                            badrow = r+1
                            badcol = c+1

        #to stop them from getting a three +-+
        for r in range(0,6):
            for c in range(0,5):
                #+-+
                #own
                if board[r,c] == self.turn and board[r,c+1] == 0 and board[r,c+2] == self.turn:
                    #doesn't allow the opponent to defend against bot
                    if badrow != r and badcol != c+1:
                        if r == 5 or board[r+1,c+1] != 0:
                            return c+1
                        else:
                            badrow = r
                            badcol = c+1
                #opponent
                if board[r,c] == 3-self.turn and board[r,c+1] == 0 and board[r,c+2] == 3-self.turn:
                    #doesnt give the opponebt the win
                    if badrow != r and badcol != c+1:
                        if r == 5 or board[r+1,c+1] != 0:
                            return c+1
                        else:
                            badrow = r
                            badcol = c+1

#if there is no easy way to win or defend

        #to get a three in a row horizontal where you will always win no matter what. -+++-
        for r in range(0,6):
            for c in range(0,3):
                #
                #own
                if board[r,c] == 0 and board[r,c+1] == self.turn and board[r,c+2] == self.turn and board[r,c+3] == 0 and board[r,c+4] == 0:
                    #doesn't allow the opponent to defend against bot
                    if badrow != r and badcol != c+3:
                        if r == 5 or board[r+1,c+3] != 0:
                            return c+3
                        else:
                            badrow = r
                            badcol = c+3
                #opponent
                if board[r,c] == 0 and board[r,c+1] == 3-self.turn and board[r,c+2] == 3-self.turn and board[r,c+3] == 0 and board[r,c+4] == 0:
                    #doesnt give the opponebt the win
                    if badrow != r and badcol != c+3:
                        if r == 5 or board[r+1,c+3] != 0:
                            return c+3
                        else:
                            badrow = r
                            badcol = c+3
                #
                #own
                if board[r,c] == 0 and board[r,c+1] == 0 and board[r,c+2] == self.turn and board[r,c+3] == self.turn and board[r,c+4] == 0:
                    #doesn't allow the opponent to defend against bot
                    if badrow != r and badcol != c+1:
                        if r == 5 or board[r+1,c+1] != 0:
                            return c+3
                        else:
                            badrow = r
                            badcol = c+1
                #opponent
                if board[r,c] == 0 and board[r,c+1] == 0 and board[r,c+2] == 3-self.turn and board[r,c+3] == 3-self.turn and board[r,c+4] == 0:
                    #doesnt give the opponebt the win
                    if badrow != r and badcol != c+1:
                        if r == 5 or board[r+1,c+1] != 0:
                            return c+3
                        else:
                            badrow = r
                            badcol = c+1

                #-+-+-
                #own
                if board[r,c] == 0 and board[r,c+1] == self.turn and board[r,c+2] == 0 and board[r,c+3] == self.turn and board[r,c+4] == 0:
                    #doesn't allow the opponent to defend against bot
                    if badrow != r and badcol != c+2:
                        if r == 5 or board[r+1,c+2] != 0:
                            return c+2
                        else:
                            badrow = r
                            badcol = c+2
                #opponent
                if board[r,c] == 0 and board[r,c+1] == 3-self.turn and board[r,c+2] == 0 and board[r,c+3] == 3-self.turn and board[r,c+4] == 0:
                    #doesnt give the opponebt the win
                    if badrow != r and badcol != c+2:
                        if r == 5 or board[r+1,c+2] != 0:
                            return c+2
                        else:
                            badrow = r
                            badcol = c+2

        #vertical checking x 2
        for c in range(0,7):
            for r in range(0,4):

                #opponent vertical
                if board[r,c] == 0 and board[r+1,c] == 3-self.turn and board[r+2,c] == 3-self.turn:
                    if badrow != r and badcol != c:
                        return c
                    else:
                            badrow = r
                            badcol = c
                #own vertical
                if board[r,c] == 0 and board[r+1,c] == self.turn and board[r+2,c] == self.turn:
                    if badrow != r and badcol != c:
                        return c
                    else:
                            badrow = r
                            badcol = c

        #horizontal checking x2
        for r in range(0,6):
            for c in range(0,5):
                #
                #opponent
                if board[r,c] == 0 and board[r,c+1] == 3-self.turn and board[r,c+2] == 3-self.turn:
                    if badrow != r and badcol != c:
                        if r == 5 or board[r+1,c] != 0:
                            return c
                        else:
                            badrow = r
                            badcol = c
                #own
                if board[r,c] == 0 and board[r,c+1] == self.turn and board[r,c+2] == self.turn:
                    if badrow != r and badcol != c:
                        if r == 5 or board[r+1,c] != 0:
                            return c
                        else:
                            badrow = r
                            badcol = c

                #
                #opponent
                if board[r,c] == 3-self.turn and board[r,c+1] == 0 and board[r,c+2] == 3-self.turn:
                    if badrow != r and badcol != c+1:
                        if r == 5 or board[r+1,c+1] != 0:
                            return c+1
                        else:
                            badrow = r
                            badcol = c+1
                #own
                if board[r,c] == self.turn and board[r,c+1] == 0 and board[r,c+2] == self.turn:
                    if badrow != r and badcol != c+1:
                        if r == 5 or board[r+1,c+1] != 0:
                            return c+1
                        else:
                            badrow = r
                            badcol = c+1

                #
                #opponent
                if board[r,c] == 3-self.turn and board[r,c+1] == 3-self.turn and board[r,c+2] == 0:
                    if badrow != r and badcol != c+2:
                        if r == 5 or board[r+1,c+1] != 0:
                            return c+1
                        else:
                            badrow = r
                            badcol = c+2
                #own
                if board[r,c] == self.turn and board[r,c+1] == self.turn and board[r,c+2] == 0:
                    if badrow != r and badcol != c+2:
                        if r == 5 or board[r+1,c+1] != 0:
                            return c+1
                        else:
                            badrow = r
                            badcol = c+2

        #if the middle space is empty or the one above is free
        if board[5,3] == 0 or board[5,3] == self.turn and board[4,3] == 0 or board[5,3] == 3-self.turn and board[4,3] == 0:
                return 3
        else:
            #put a piece above the opponents piece
            for c in range(0,7):
                for r in range(0,5):
                    if board[r,c] == 0 and board[r+1,c] == 3-self.turn:
                        if badrow != r and badcol != c:
                            return c
                        else:
                            badrow = r
                            badcol = c

        #IF ALL ELSE FAILS HAVE A RANDOM PIECE
        return random.randrange(7)
